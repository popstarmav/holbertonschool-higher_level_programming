class BaseGeometry:
    """
    BaseGeometry class represents geometric operations.

    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

    >>> bg.integer_validator("name", "5")
    Traceback (most recent call last):
        ...
    TypeError: 'value' must be an integer

    >>> bg.integer_validator("name", True)
    Traceback (most recent call last):
        ...
    TypeError: 'value' must be an integer

    >>> bg.integer_validator("name", -5)
    Traceback (most recent call last):
        ...
    ValueError: 'value' must be greater than 0

    >>> bg.integer_validator("name", 0)
    Traceback (most recent call last):
        ...
    ValueError: 'value' must be greater than 0

    >>> bg.integer_validator("name", 5)
    
    """

    def area(self):
        """
        Calculate the area (not implemented).
        """
        raise Exception("area() is not implemented")

    def integer_validator(self, name, value):
        """
        Validate 'value' as an integer greater than 0.
        
        Args:
            name (str): Name of the value being validated.
            value (int): The value to be validated.

        Raises:
            TypeError: If 'value' is not an integer.
            ValueError: If 'value' is less than or equal to 0.
        """

        if not isinstance(value, int):
            raise TypeError(f"'{name}' must be an integer")

        if value <= 0:
            raise ValueError(f"'{name}' must be greater than 0")


# Testing the BaseGeometry class with doctests
if __name__ == "__main__":
    import doctest
    doctest.testmod()
