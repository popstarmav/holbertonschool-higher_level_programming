Using `matrix_divided`
-----------------------

Verifying the behavior of the `matrix_divided` function:

1. Validates that all elements in the matrix are either integers or floats.
2. Ensures that all sublists within the matrix have the same length.
3. Checks whether the divisor, `div`, is a valid float, integer, or not equal to zero.
4. Divides every element in the matrix by `div` and returns a new matrix.

Let's start by importing the `matrix_divided` function:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now, let's explore its usage:

Basic Usage:

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Invalid Input (Non-integer/float elements in the matrix):

    >>> matrix = [['h', 'o', 'l'], ['b', 5, 6]]
    >>> print(matrix_divided(matrix, 5))
    Traceback (most recent call last):
    ...
    TypeError: matrix must consist of integers/floats only

Zero Divisor:

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Inconsistent Sublist Lengths in the Matrix:

    >>> matrix = [[1, 2, 3], [4, 5]]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    ...
    TypeError: Each sublist within the matrix must have the same length

Negative Values in the Matrix:

    >>> matrix = [[1, 2, -3], [4, 5, -6]]
    >>> print(matrix_divided(matrix, 2))
    [[0.5, 1.0, -1.5], [2.0, 2.5, -3.0]]

Empty Matrix:

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 2))
    [[]]

Missing Input:

    >>> print(matrix_divided())
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() requires 2 arguments: 'matrix' and 'div'

